// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  studentId     Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created       DateTime  @default(now())
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Vote          Vote[]
}

enum Role {
  BANNED
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contest {
  id           String                  @id @default(cuid())
  votes        Vote[]
  show         Boolean                 @default(false)
  created      DateTime                @default(now())
  participants ContestOnParticipants[]
}

model ContestOnParticipants {
  contest        Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contestId      String
  participants   Participants @relation(fields: [participantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantsId String

  @@id([contestId, participantsId])
}

model Participants {
  id          String                  @id @default(cuid())
  name        String
  description String?
  contestId   String?
  vote        Vote[]
  contests    ContestOnParticipants[]
}

model Vote {
  id            String        @id @default(cuid())
  contest       Contest?      @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contestId     String?
  user          User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?
  created       DateTime      @default(now())
  participant   Participants? @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId String?
}
